---
layout: post
title:      "My first CLI App"
date:       2020-05-17 07:59:29 +0000
permalink:  my_first_cli_app
---


Boy, where to begin. This was definitely an experience. This was a process that took just about the full two weeks that were alotted to us. Let me say that building my Star Wars CLI app was a very enjoyable experience. There were many many many late nights. It has been an absolute pleasure to watch as my program grew and grew. So let me begin.


When I first sat down at my computer to begin this project. I realized that I would need to do this on a local environment. Getting that set up was a minor headache as I had to run through the installation process about 3 times, each time resulting in a lengthy screen share with someone from Ask A Question. After finally getting my local environment set up I opened VS Code and just stared at the screen for a moment thinking to myself "where do I start?" I watched my instructors sample CLI build video to help get my file structure set up and to start getting a few of the basic functions of the program running. I used the SWAPI api for this project. using this this api presented its own set of challenges.

I started by making my first api call to get a list of people from the api. This first call produced a list of 10 people and their information. I made my first class and began to write the simple methods for initializing and storing the list of people in an array and being able to access that array. The further along I got in my code the longer my initialize methods became for my classes. It was a little jarring at first to look at this very long initialize method, I remember thinking to myself at one point "Man this is a really big method." That is what the code and the way that I structured my application called for. I mentioned that the api I used for this project came with its own set of challenges. One fun challenge was, I will use my person class as an example, that there was some general data in there in string form for the persons general information (i.e. name, height..ect) that was easily accessed by initializing the person object with said properties. The rest of the information about a person (ex: Homeworld, Starhips, Vehicles, Species, and Films) was set to a url leading you to that particular objects page in the api. It was certainly an interesting challenge to get that running. I accomplished this by making a seperate api call for that informtion and the linking it to an initialized property for the object. Another challenge I encountered and probably the one that was most time consuming was that the api's end point was an HTTPS: and the urls to different pieces of data for the objects was an HTTP: so now I had this fun problem where the api call would fail. I reached out to a friend of mine and he helped me tremendously in finding a solution to this problem by using .sub "http:", "https:". the dot sub substitutes the thing on the right for the thing on the left. I initially used .sub! and I used it in multiple places, in my api class when I made those specific api calls for the persons info, I also used it in my initialize methods for my initialized urls. This process worked until it didn't, leaning on my friends experience in coding, he helped me to find the right answers by asking the right questions and giving suggestions. I eventually changed had to take out the .sub from my initialize as it began to throw errors and was clashing with the .sub in the api class when i was making those api calls. I became very familiar with the error that meant I needed to add a .sub into my api class.

Errors and debugging. This I am sure is everyones favorite part of coding. There is nothing like writing code and thinking that it will work when you push enter to run your program, and then it just breaks. so now you have to figure out why it broke. For me it seemed more often than not that my errors were thrown because I forgot some small detail in my code. There were those times where I would have to debug for a couple of hours. Speaking of debugging the friend I mentioned earlier shared some awesome advise on debugging. Puts statements! I am sure that this method of debugging in pretty common, but it was awsome to lay out a trail or "bread crumbs" in my code to see what lines of code were being hit and which ones were not. My example of this was in my Cli class and the methods wrote for displaying the information for each of the 6 objects that I had. I had a hard time with my conditional staments at one point and I layed down puts statments in each of my if/elsif/else statements to find out where my problems were, as I started to see what lines of code were being read and which were not it became so much easier to find the solution to my problem and fix it.

During this process of working with this SWAPI api. I saw where this api had flaws and I love Star Wars. I thought and still think that I would like to, in the future, possibly host this api and make it better and more easily usable for other people who would like to use it.

I learned a tremendous amount during this project. I learned that I need to certainly change the way that I think about code and the way that I approach my code. I also learned that I need to brush up on my math skills. This has been, as I said before, an awesome and challenging experience. 





